#------------------------------------------------------
COMANDOS MAIS COMUNS DO GIT
#------------------------------------------------------

# git --version
    - Exibe a versão do git utilizada

# git status
    - Exibe o status do repositório, com os todos os arquivos que foram modificados, comitados, etc.

# git init
    - Inicializa um repositório no pc
    - Portanto, cria um arquivo .git oculto na pasta que será o repo

# git add [arquivo.ext]
    - Adiciona um arquivo ao repositório.
    - Arquivos com untraked (U) são os que serão adicionados.
    - usar 'git add .' adiciona todos os arquivos existentes na pasta ao repositório.

# git commit -m "[mensagem]"
    - Envia as alterações do repositório para ferramenta de gerenciamento de repositórios (GitHub e BitBucket) com uma mensagem incluida
    - A mensagem deve conter um titúlo sobre as alterações e incrementações realizadas
    - Arquivos modified (M) e added (A) serão comitados.
    - usando a flag -a (all) é possível comitar vários arquivos de uma só vez

# git branch -M master
    - Cria uma branch principal ou branch mestra no repositório

# git remote add origin [linkdoreporemoto]
    - Adiciona uma origem, em poucas palavras, atrela o repositório local ao repositório do GitHub.

# git remote rm origin
    - Remove a origem

# git remote -v
    - Exibe a origem do repo do servidor

# git push -u origin master
    - Envia o repositório com a branch main para o servidor (repo remoto) do GitHub

# git pull
    - Executa um merge entre os repos remoto e local.
    - Com esse código executado serão buscadas atualizações e, se encontradas, elas serão unidas ao código local;
    - Cada branch pode ser atualizado com um pull

# git clone [linkdoreporemoto]
    - Clona repositório na pasta atual, isto é, baixa um repo de um server remoto
    - Geralmente usado quando se ingressa no projeto pela primeira vez

# git rm
    - Deleta arquivos da monitoração do git
    - Depois de deletado ele não terá suas atualizações mais consideradas pelo git

# git log
    - Esse comando permite acessar um log de modificações feitas no projeto;
    - Todos os commits realizados até então serão informados
    - Apertando a tecla Q, saímos do log de commits

 # git mv
    - Permite renomear um arquivo ou mover um arquivo para outra pasta
    - Fazendo isso, o arquivo será inserido no git
    - O arquivo no estado anterior será deletado

# git checkout
    - Retorna ao estado original um arquivo recém modificado.
    - O estado original equivale ao estado presente na repo remota
    - Usando esse comando o arquivo sai do staging (o arquivo não será trackeado para ser dado um commit)
    - Se houver outra alteração, ele entrará novamente no staging

# .gitignore
    - Esse não é um comando, mas sim um arquivo que fica na raiz do projeto
    - Outros arquivos que não deverão entrar no versionamento serão inseridos nele, ignorando por completo esses arquivos
    - Muito útil com arquivos gerados automaticamente ou arquivos sensíveis
    - Primeiro deve-se inserir os arquivos ou pastas que serão ignorados no gitignore, depois pode-se inserir os mesmos no projeto

# git reset --hard origin/[branch]
    - Reseta um branch por completo. Todas as alterações pendentes e commitadas serão excluidos.
    - Tome cuidado com esse comando.

#------------------------------------------------------
TRABALHANDO COM BRANCHS 
#------------------------------------------------------

# git branch
    - Exibe todos os branchs existentes no projeto

# git branch [nomedobranch]
    - Cria uma nova branch
    - Sempre que for criar um branch, ele deve partir da master

# git branch -d/--delete [nomedobranch]
    - Deleta um branch
    - Não se deleta branchs normalmente (isso geralmente ocorre quando um branch é criado errado)

# git checkout [nomedobranch]
    - Muda de branch
    - Com a flag -b ele cria e muda de branch
    - Ao alterar um branch, mudanças que ainda não foram comitadas podem acabar indo junto

# git merge [nomedobranch]
    - Une o código de dois branchs distintos
    - É através desse comando que é possível receber atualizações de outros devs

#------------------------------------------------------
STASHS
#------------------------------------------------------

# git stash
    - Reinicia a branch a partir do repositório inicial, descartando todo o código criado
    - O código perdido pode ser recuperado

# git stash list
    - Exibe todas as stashs criadas

# git stash apply [IDdastash]
    - Recupera os comandos adicionados a stash anteriormente
    - Uma stash pode sobrescrever outra

# git stash show -p [IDdastash]
    - Exibe quais as alterações realizadas dentro de cada stash

# git stash clear
    - Remove todas as stash de uma branch

# git stash drop [IDdastash]
    - Remove apenas uma stash específica da branch

#------------------------------------------------------
TAGS
#------------------------------------------------------

# git tag -a [nomedatag] -m "[mensagem]" 
    - Cria uma tag na branch
    - A tag serve como um checkpoint de um branch, diferente de uma stash
    - É usado para dermacar estágios de desenvolvimento de algum recurso
    - Sempre deve commitar antes de criar uma tag

# git tag
    - Exibe todas as tags existentes

# git show [nomedatag]
    - Exibe a tag selecionada detalhadamente

# git checkout [nomedatag]
    - Troca de tag, trocando assim de checkpoints do comando

# git push origin [nomedatag]
    - Envia uma tag para o repositório do código no servidor
    - Com git push origin --tags ele envia todas as tags existentes

# git fetch -a
    - Atualiza seu git com todas as branchs e tags que ainda não foram reconhecidas
    - Esse comando é útil para utilizar o branch de algum outro dev do time

# git remote
    - Permite ralizar operações como adicionar um repositório para trackear ou remover
    - git remote add origin [linkdoreporemoto] adiciona um repositório remoto

#------------------------------------------------------
SUBMÓDULOS
#------------------------------------------------------

# git submodule
    - Exibe todos os submódulos existentes

# git submodule add [linkdorepositorio]
    - Adiciona outro repositório como um submódulo ao repositório original

# git push --recurse-submodules=on-demand
    - Atualiza o submódulo; Deve ser feito depois de serem comitadas as mudanças do submodulo

#------------------------------------------------------
COMANDOS DE INSPENÇÃO DE REPOSITÓRIOS
#------------------------------------------------------

# git show
    - Dá informações do branch atual e dos commits realizados, incluindo as modificações dos commits

# git diff
    - Exibe as diferenças do branch atual com o remoto

# git diff HEAD:[arquivo1] [arquivo2]
    - Exibe a diferença entre dois arquivos do repo atual com o remoto

# git shortlog
    - Gera um log resumido do projeto
    - Cada commit será unido por nome do autor, permitindo saber quais commits foram enviados e por quem

#------------------------------------------------------
ADMINISTRAÇÃO DO REPOSITÓRIO
#------------------------------------------------------

# git clean -f
    - Limpa todos os arquivos que estão Untracked(todos que vocês não utilizou o git add)
    - É muito utilizado para arquivos que são gerados automaticamente, por exemplo.

# git gc
    - Garbage Colector = gc
    - Essa funcionalidade identifica arquivos que não são mais necessários e os exclui
    - Assim, o repositório terá sua performance otimizada (É bom usar de vez em quando)

# git fsck
    - Abreviação de File System Check
    - Este comando verifica a integridade de arquivos e sua conectividade, verificando possíveis corrupções de arquivos
    - Comando de rotina, usado para averiguar e garantir a integridade dos arquivos do programa

# git reflog
    - Mapeia todos os passos do dev no repositório, até mudanças de branchs e resets
    - Reflogs ficam salvos até expirar, o tempo de expiração padrão é de 30 dias
    - Reflog emite um código(HASH) no começo das linhas as quais você consegue se mover usando git reset --hard [HASH]

# git archive --format zip --output [nomedozip.zip] [nomedabranch]
    - Permite transformar um repositório em um arquivo compactado
    - Assim a branch em questão será zipada no nome dado

#------------------------------------------------------
TRABALHANDO COM COMMITS
#------------------------------------------------------

# git commit
    - Commits sem sentidos atrapalham os projetos
    - É necessário padronizar o uso dos commits para que o projeto cresça de forma saudável em seu versionamento
    - Isso ajuda no envio dos pull requests, na melhoria dos logs do git log e na manutenção do projeto.
    - Deve ser evitado o envio de vários commits que executem pequeninas funções ou commits com titúlos alheios
    - Para esses tipos citados acima é melhor usar um recurso chamado PRIVATE BRANCHES (Criar uma branch de outra branch que será privada)

# git rebase [nomedobranch] [nomedobranchprivado]
    - Leva apenas um commit definitivo da branch privada para a normal