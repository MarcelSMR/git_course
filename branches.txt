# git branch
    - Exibe todos os branchs existentes no projeto

# git branch [nomedobranch]
    - Cria uma nova branch
    - Sempre que for criar um branch, ele deve partir da master

# git branch -d/--delete [nomedobranch]
    - Deleta um branch
    - Não se deleta branchs normalmente (isso geralmente ocorre quando um branch é criado errado)

# git checkout [nomedobranch]
    - Muda de branch
    - Com a flag -b ele cria e muda de branch
    - Ao alterar um branch, mudanças que ainda não foram comitadas podem acabar indo junto

# git merge [nomedobranch]
    - Une o código de dois branchs distintos
    - É através desse comando que é possível receber atualizações de outros devs

# git stash
    - Reinicia a branch a partir do repositório inicial, descartando todo o código criado
    - O código perdido pode ser recuperado

# git stash list
    - Exibe todas as stashs criadas

# git stash apply [IDdastash]
    - Recupera os comandos adicionados a stash anteriormente
    - Uma stash pode sobrescrever outra

# git stash show -p [IDdastash]
    - Exibe quais as alterações realizadas dentro de cada stash

# git stash clear
    - Remove todas as stash de uma branch

# git stash drop [IDdastash]
    - Remove apenas uma stash específica da branch

- São ramos criados pelo git que separa as versões do projeto
- Quando um projeto é criado, junto dele também é iniciado um branch master
- A cada nova feature do projeto, uma branch separada é formada
- Após a finalização das alterações os branchs são unidos num único código fonte principal do projeto

